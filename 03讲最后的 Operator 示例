public class CustomOperator extends AbstractStreamOperator<String[]> implements OneInputStreamOperator<String, String[]>,
    BoundedOneInput {
    private static final long serialVersionUID = 1212788424510160069L;
    List<String> cache;
    int count = 0;
    String[] ret;
    StringBuilder sb1;
    StringBuilder sb2;

    @Override
    public void open() throws Exception{
        super.open();
        cache = new ArrayList<>();
        sb1 = new StringBuilder("");
        sb2 = new StringBuilder("");
    }
    @Override
    public void processElement(StreamRecord<String> element) throws Exception {
        cache.add(element.getValue());
        System.out.println(element.getValue());
        if(count++ == 2){
            output();
        }
    }
    private void output(){
        if(transpose()){
            output.collect(new StreamRecord<>(ret));
            count = 0;
            ret = null;
            sb1.setLength(0);
            sb2.setLength(0);
            cache.clear();
        }
    }

    private boolean transpose(){
        if(cache != null && cache.size() > 0){
            ret = new String[2];
            for(String s : cache){
                String[] tmp = s.split("\\s+");
                assert tmp.length == 2;
                sb1.append(tmp[0]).append(" ");
                sb2.append(tmp[1]).append(" ");
            }
            sb1.setLength(sb1.length() - 1);
            sb2.setLength(sb2.length() - 1);
            ret[0] = sb1.toString();
            ret[1] = sb2.toString();
            return true;
        }
        return false;
    }
    @Override
    public void endInput() throws Exception {
        output();
    }
    @Override
    public void close() throws Exception{
        cache = null;
        sb1 = null;
        sb2 = null;
    }
}
 
这个 Operator 的作用是实现矩阵转置，具体操作： processElement 接收数据进行缓存时，满三行之后进行转置输出。同时这个 Operator 继承了 BoundedOneInput 接口，当输入结束，若最后输入的数据不满三行，则直接将缓存的数据进行转置输出。


比如通过如下代码输入：
11，12
21，22
31，32
41，42
51，52
public class CustomOperatorExample {
    public static void main(String[] args) throws Exception {
        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();
        env.setParallelism(1);
        DataStream<String> source = env.fromElements(new String[]{
            "11 12",
            "21 22",
            "31 32",
            "41 42",
            "51 52"
        });
        DataStream<String[]> cube = source.transform("CustomOperator", BasicArrayTypeInfo.STRING_ARRAY_TYPE_INFO, new CustomOperator());

        cube.addSink(new TestAppendPrintSink());
        env.execute();
    }
}



最终会输出（具体可以看一下实例代码，这里不做解读）：
11，21，31
12，22，32
及
41，51
42，52
